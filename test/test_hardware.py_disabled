#
# This kind of tests should go against the emulator the same way as against real hardware.#
# Well now at least this file goes against real hardware
#

import pytest
from lucipy import LUCIDAC, Circuit
from fixture_circuits import sinus

@pytest.fixture
def hc():
    hc = LUCIDAC("tcp://192.168.150.229:5732")
    yield hc
    hc.sock.sock.close() # or similar

def test_set_circuit_for_cluster(hc):
    hc.reset_circuit()
    set_conf_cluster = sinus().generate(skip="/M1") # Test Hardware has no M1!)
    hc.set_circuit(set_conf_cluster)
    get_conf_cluster = hc.get_circuit()["config"]
   
    # canonicalize U block defaults:
    # deal with bug in current tested firmware:
    for i,v in enumerate(get_conf_cluster["/0"]["/U"]["outputs"]):
        if v == -2:
            get_conf_cluster["/0"]["/U"]["outputs"][i] = None
            
    # canonicalize I block defaults:
    for i,v in enumerate(get_conf_cluster["/0"]["/I"]["outputs"]):
        if not v:
            get_conf_cluster["/0"]["/I"]["outputs"][i] = []
            
    print(f"{set_conf_cluster["/0"]=}")
    print(f"{get_conf_cluster["/0"]=}")
    
    ## Differences are still in the U-block. Look carefully.
    ## Probably we have an old an unsuitable commit.
    
    assert set_conf_cluster["/0"] == get_conf_cluster["/0"]

def disable_test_set_adc_channels(hc):
    hc.reset_circuit()
    c = Circuit()
    c.set_adc_channels([0,1,2])
    set_conf = c.generate(skip="/M1")  # Test Hardware has no M1!
    print(f"{set_conf=}")
    hc.set_config(set_conf)
    get_conf = hc.get_circuit()["config"]
    print(f"{get_conf=}")
    assert get_conf["adc_channels"] == c.adc_channels
